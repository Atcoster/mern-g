@function svg-url($svg) {
	$encoded: '';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);

	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk, '"', "'");
		$chunk: str-replace($chunk, '<', '%3C');
		$chunk: str-replace($chunk, '>', '%3E');
		$chunk: str-replace($chunk, '&', '%26');
		$chunk: str-replace($chunk, '#', '%23');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}

	@return url('data:image/svg+xml;charset=utf8,#{$encoded}');
}

// Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
	$search-string: to-string($search);
	$index: str-index($string, $search-string);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(str-slice($string, $index + str-length($search-string)), $search-string, $replace);
	}

	@return $string;
}

@function to-string($value) {
	@return inspect($value);
}

/* custom mixin to replace a defined fill color with another one */
@function svg-url-with-replaced-fill($svg, $fill-to-replace, $new-fill) {
	$replaced-svg: str-replace($svg, $fill-to-replace, $new-fill);
	$replaced-svg-url: svg-url('#{$replaced-svg}');

	@return $replaced-svg-url;
}
